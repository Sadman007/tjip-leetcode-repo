Problem: 136. Single Number
Code:
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        for(int i=1; i<nums.size(); i++){
            nums[0]^=nums[i];
        }
        return nums[0];
    }
};

---------------------------------------------------
Problem: 283. Move Zeroes
Code:
class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        int pos=0;
        while(pos<nums.size() && nums[pos]!=0) pos++;
        
        for(int i=pos+1; i<nums.size(); i++){
            if(nums[i]!=0){
                swap(nums[i], nums[pos]);
                pos++;
            }
        }
    }
};

---------------------------------------------------------
Problem: 88. Merge Sorted Array

Code:
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int i=m-1, j=n-1, k=m+n-1;
        
        while(i>=0 && j>=0){
            if(nums1[i]>nums2[j]){
                nums1[k]=nums1[i];
                k--;
                i--;
            }
            else{
                nums1[k]=nums2[j];
                k--;
                j--;
            }
        }
        
        while(j>=0){
            nums1[k]=nums2[j];
                k--;
                j--;
        }
    }
};
--------------------------------------------------------
probleem: 31. Next Permutation
Code:
class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int i=nums.size()-1, j=i;
        
        while(i>0 && nums[i-1] >= nums[i]){
            i--;
        }
        if(i==0) {
            sort(nums.begin(), nums.end());
        }
        else{
            while(nums[j]<=nums[i-1]) {j--;}
            swap(nums[i-1], nums[j]);
            sort(nums.begin()+i, nums.end());
        }
    }
};
---------------------------------------------------------------

Problem: 1. Two sum
Code:
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> mp;
        int num1, num2;
        vector<int>ans;
        bool n1=1, n2=1;
        for(int i=0; i<nums.size(); i++){
            mp[nums[i]]+=1;
        }
        
        for(int i=0; i<nums.size(); i++){
            if(nums[i]*2==target){
                if(mp[nums[i]]>=2){
                    num1=nums[i];
                    num2=nums[i];
                    break;
                }
            }
            else{
                if(mp[target-nums[i]]){
                    num1=nums[i];
                    num2=target-num1;
                    break;
                }
            }
        }
        
        for(int i=0; i<nums.size(); i++){
            if(nums[i]==num1 && n1){
                ans.push_back(i);
                n1=0;
            }
            else if(nums[i]==num2 && n2){
                ans.push_back(i);
                n2=0;
            }
        }
        
        return ans;
        
        
    }
};
---------------------------------------------------------------
Problem: 121. Best Time to Buy and Sell Stock
Code:
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n=prices.size(), ans=0;
        vector<int> nextMax(n);
        nextMax[n-1]=prices[n-1];
        for(int i=n-2; i>=0; i--){
            nextMax[i]=max(nextMax[i+1], prices[i]);
        }
        for(int i=0; i<n; i++){
            ans=max(ans, nextMax[i]-prices[i]);
        }
        return ans;
    }
};
--------------------------------------------------
Problem: 122. Best Time to Buy and Sell Stock II
Code:
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int prevBuy=prices[0], ans=0;
        for(int i=0; i<prices.size(); i++){
            if(prices[i]>prevBuy) {
                ans+=(prices[i]-prevBuy);
                prevBuy=prices[i];
            }
            else{
                prevBuy=prices[i];
            }
        }
        return ans;
    }
};
-----------------------------------------------------------------
Problem: 169. Majority Element
Code: 
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int winner=0, voteAhead=0;
        for(int i=0; i<nums.size(); i++){
            if(voteAhead==0){
                voteAhead=1;
                winner=nums[i];
            }
            else if(winner==nums[i]){
                voteAhead++;
            }
            else{
                voteAhead--;
            }
        }
        return winner;
    }
};
--------------------------------------------------
Problem: 15. 3Sum
Code:
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        if(nums.size()==0) return {};
        set<vector<int>> rawAns;
        vector<int> triplet;
        sort(nums.begin(), nums.end());
        for(int i=0; i+2<nums.size(); i++){
            if(i > 0 && nums[i] == nums[i - 1]) continue;
            for(int j=i+1; j+1<nums.size(); j++){
                if(i > 0 && nums[i] == nums[i - 1]) continue;
                if(binary_search(nums.begin()+j+1, nums.end(), 0-nums[i]-nums[j])){
                    triplet.clear();
                    triplet.insert(triplet.end(), {nums[i], nums[j], 0-nums[i]-nums[j]});
                    sort(triplet.begin(), triplet.end());
                    rawAns.insert(triplet);
                }
            }
        }
        vector<vector<int>> triplets(rawAns.begin(), rawAns.end());
        return triplets;
    }
};
-----------------------------------------------------------------------------
Problem: 56. Merge Intervals
Code:
class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        vector<vector<int>> ans;
        int start, end;
        sort(intervals.begin(), intervals.end(), [](const vector<int>& v1,const vector<int>& v2){return v1[0] < v2[0];});
        for(int i=0; i<intervals.size(); i++){
            start=intervals[i][0];
            end=intervals[i][1];
            while(i+1 < intervals.size() && intervals[i+1][0]<=end){
                end=max(end, intervals[i+1][1]);
                i++;
            }
            
            ans.push_back({start, end});
        }
        return ans;
    }
};
-----------------------------------------------------------------------------------
Problem: 41. First Missing Positive
Code:
class Solution {
public:
    int firstMissingPositive(vector<int>& nums) {
        unordered_set<int> uNums(nums.begin(), nums.end());
        int n=uNums.size();
        for(int i=1; i<=n+1; i++){
            if(!uNums.count(i)) return i;
        }
        return 0;
    }
};
----------------------------------------------------------------------------
Problem: 215. Kth Largest Element in an Array
Code:
class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        sort(nums.begin(), nums.end());
        int n=nums.size();
        return nums[n-k];
    }
};
-----------------------------------------------------
Problem: 238. Product of Array Except Self
Code:
class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n=nums.size();
        vector<int>products(n), leftProd(n), rightProd(n);
        leftProd[0]=1;
        rightProd[n-1]=1;
        for(int i=1; i<nums.size(); i++){
            leftProd[i]=leftProd[i-1]*nums[i-1];
            rightProd[n-i-1]=rightProd[n-i]*nums[n-i];
        }
        for(int i=0; i<n; i++){
            products[i]=leftProd[i]*rightProd[i];
        }
        return products;
    }
};









